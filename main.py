# main.py
import json
from datetime import datetime
from agents.research_agent import research_topic
from agents.performance_agent import analyze_performance
from agents.script_agent import build_script_with_template, build_post_content
from agents.hook_agent import pick_top_hooks
from services.linkedin_service import create_post_with_generated_image
from services.openai_client import get_trending_topic
from utils.text_utils import ask_option

def run_flow(user_topic, profile_path="data/profile_data.json"):
    profile = json.load(open(profile_path, "r", encoding="utf-8"))
    print("1) Research agent -> buscando y resumiendo...")
    research = research_topic(user_topic, profile)
    print("2) Performance agent -> analizando posts hist√≥ricos...")
    perf = analyze_performance()
    print("3) Script agent -> generando gui√≥n...")
    script = build_script_with_template(research, perf, profile)
    print("4) Hook agent -> seleccionando hooks...")
    hooks = pick_top_hooks(user_topic, n=3)
    result = {
        "profile": profile,
        "research": research,
        "performance": perf,
        "script": script,
        "hooks": hooks
    }
    return result

def main():
    # Paso 1: Elegir tipo de tema
    tema_choice = ask_option(
        "Seleccionar como quieres elegir el tema del post:",
        ["Autom√°tico", "Semi-Automatico", "Manual"]
    )

    temas = [
        # üöÄ Tendencias y aspiraciones
        "Tendencias tecnol√≥gicas 2025-2026: lenguajes, frameworks y paradigmas que marcar√°n la pr√≥xima ola",
        "Arquitectura limpia y DDD moderno: ¬ørealmente escalable o exceso de complejidad?",
        "Automatizaci√≥n pr√°ctica: c√≥mo integrar n8n y herramientas no-code sin perder control t√©cnico",
        "Desarrollo h√≠brido .NET + Python: c√≥mo combinar ecosistemas sin duplicar esfuerzos",
        "Agentes aut√≥nomos e IA multimodal: casos reales y riesgos de su adopci√≥n prematura",
        "Productividad del desarrollador en 2026: IA, scripts y automatizaci√≥n como ventaja competitiva",
        "Historias de software: √©xitos y fracasos reales de startups tecnol√≥gicas",
        "Tecnolog√≠a con prop√≥sito: emprendimientos sostenibles y √©tica en la era de la automatizaci√≥n",

        # ‚öñÔ∏è Temas cr√≠ticos y debates
        "¬øPuede n8n o herramientas no-code sostener software de gran escala? An√°lisis de costos y l√≠mites",
        "El mito de la IA que reemplaza desarrolladores: ¬øproductividad o dependencia?",
        "Microservicios vs Monolitos modernos: ¬øqu√© arquitectura tiene m√°s sentido en 2026?",
        "Copilots e IA generativa: ¬ømejoran la calidad del c√≥digo o crean deuda t√©cnica invisible?",
        "Scrum 2.0 y equipos h√≠bridos con IA: ¬øm√°s eficiencia o m√°s burocracia digital?",
        "Cloud y costos ocultos: c√≥mo evitar sorpresas en proyectos medianos y grandes",
        "No-code vs c√≥digo tradicional: ¬ødemocratizaci√≥n o p√©rdida de control?"
    ]
    selected_topic = ""
    if tema_choice == "Autom√°tico":
        selected_topic = get_trending_topic()
    elif tema_choice == "Semi-Automatico":
        selected_topic = ask_option("Selecciona un tema:", temas)
    else:
        selected_topic = input("\n‚úçÔ∏è Escribe el tema que quieres usar: ").strip()


    if not selected_topic:        
        print("‚ö†Ô∏è No se ha proporcionado un tema.")
        return main()

    print(f"\nüß† Generando contenido para el tema: {selected_topic}")

    # Paso 2: Ejecutar flujo de generaci√≥n
    out = run_flow(selected_topic)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    with open(f"output_run_{timestamp}.json", "w", encoding="utf-8") as f:
        json.dump(out, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ Resultado guardado en output_run_{timestamp}.json")

    script = out.get("script", {})
    prompt_for_image = script.get("prompt_for_image", "")
    post_text = build_post_content(script)

    print("\nüìÑ Contenido generado:")
    print(f"{post_text}\n")

    print("üñºÔ∏è Prompt para imagen:")
    print(f"{prompt_for_image}\n")

    # Paso 3: Men√∫ principal
    main_choice = ask_option(
        "¬øQu√© quieres hacer ahora?",
        [
            "Publicar en perfil personal",
            "Publicar en cuenta de empresa",
            "Generar nuevamente sin publicar",
            "Salir"
        ]
    )

    if main_choice == "Salir":
        print("üëã Saliendo del programa...")
        return

    if "Generar nuevamente" in main_choice:
        print("üîÅ Reiniciando generaci√≥n...")
        return main()  # vuelve a empezar el flujo completo

    mode = "personal" if "personal" in main_choice.lower() else "organization"

    create_post_with_generated_image(post_text, [prompt_for_image], mode=mode)

if __name__ == "__main__":
    main()
